'''
GLSL - OpenGL Shader language

vertex specification 
--> vx. shader          - basic processing of all verteces in the scene
--> tesselation         - add triangles to make mesh smoother
--> geometry shader     - how geometry is interpreted
--> vx. post-processing - clipping of vx non-required for drawing pxs
--> primitive assembly  - turns the vx into ordered sets of drawing objects (lines, points, triangles)
--> pasterization -->   - px map
--> fragment shader     - make sense of all the data and determine the color of all the pixels
--> per-sample ops      - determines which objects produced which pixels

Data types:
float   32 bits     positions, texture coords, calculations
half    16 bits     short vectors, directions, dynamic color ranges
fixed   11 bits     regular colors, simple color ops
int                 counters, array indices

texture data types:
sampler2D_half      sampler2D_float
samplerCUBE_half    samplerCUBE_float

PACKED ARRAYS
int2, float4 etc (the number == length)

fixed4 color1 = (0,1,1,0);  // == r,g,b,a or x,y,z,w
fixed3 color2;
color2 = color1.rgb;
color2 = color1.bgr;
fixed3 color3 = 1;  // same as:
fixed3 color3 = (1,1,1);
color1.rg = color2.gr

PACHED MATRICES
float4x4 matrix;
float myValue = matrix._m00;    // _mRowColumn
fixed4 color = matrix._m00_m01_m02_m03;
fixed4 color = matrix[0];       // put entire row
'''
