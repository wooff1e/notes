Rendering Pipeline:
1. vertex specification
2. vertex shader (programmable) <- not optional unlike other shaders
3. tessellation (programmable) - divide up data into smaller primitives (add higher level of detail dynamically)
4. geometry shader (programmable) handles primitives
5. vertex post-processing
	- transform feedback (if enabled)
	- clipping (remove what's not visible)
6. primitive assembly - also face culling (remove primitives facing away or not visible)
7. rasterization - convert primitives to fragments
8. fragment shader (programmable) - optional but almost always used (except if only depth data needed) --> color of the pixel covered by the fragment (the only output)
9. per-sample operations 
	- tests (e.g. depth test) to see if the fragment should be drawn at all
	- color blending
	- write fragment data to the bound framebuffer
	- buffer swap to put updated framebuffer to the front


Note that glBegin.. way of rendering is depricated in OpenGL > 3.2 !!!
Instead you need to upload the vertex data to Vertex Buffer Objects. Then use glVertexAttribPointer to tell openGL how the data is laid out. Besides that you need to write shaders.

vertex shader gets called for each vertex (eg. 3 in case of triangle)
fragment shader gets called for each fragment's pixel (eg. 500K times if triangle is really big)
--> avoid unnecessary calculations in fragment shader (do it in vertex shader and pass it to frag. if possible)

VAO and VBO are way to store the data on the graphic card
VAO - Verex Array Object (defines data's attributes - position, color, texture, normals etc.)
VBO - Vertex Buffer Object (the data itself)

attribute pointers - where and how shaders to access vertex data
attributes are set per vertex
uniform variables - global to the shader, set per draw (same for all vertices)

Interpolation - a weighted average of the vertices is passed on the fragment shader

Projections
- Local space	*= model_matrix
- World space	*= view_matrix
- View space	*= projection_matrix
- Clip space
- Screen space

/*
// double background:
// Set the clear color to black
glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
// Clear the current framebuffer
// At this point the entire framebuffer is black
glClear(GL_COLOR_BUFFER_BIT);

// Set the clear color to the blue of the sky
glClearColor(0.036f, 0.627f, 1.0f, 1.0f);
// Clear the area within the scissor box (the viewport)
glEnable(GL_SCISSOR_TEST);
glClear(GL_COLOR_BUFFER_BIT);
glDisable(GL_SCISSOR_TEST);
*/


___________________________
### SETUP ###

// LINUX
sudo apt update 
sudo apt-get install libgl-dev
sudo apt install libglfw3-dev
sudo apt install libglew-dev	// alternative to glad
sudo apt install libglm-dev

sudo apt install sdl		// opengl simple alternative??

// assimp dependencies:
sudo apt install zlib1g

git clone https://github.com/assimp/assimp.git
// For assimp.lib without any tools:
cd assimp
cmake CMakeLists.txt
cmake --build .
// For assimp with the common tools like assimp-cmd
cd assimp
cmake CMakeLists.txt -DASSIMP_BUILD_ASSIMP_TOOLS=ON
cmake --build .

Note that by default this builds a shared library into the bin directory. 
// Static:
sudo apt-get update
sudo apt-get install libassimp-dev

// WINDOWS, Visual Studio
https://glew.sourceforge.net/ --> download lates release (glew-2.1.0-win32.zip)
https://www.glfw.org/download --> pre-compiled binaries 64 bit (glfw-3.4.bin.WIN64.zip)
unpack, rename to GLEW and GLFW, put int new "External Libs" folder, move it to 
C:\Users\hamster\Documents\Visual Studio 2022
(or where your projects are)
-----------------------------------------------------
create C++ windows console app
right-click on project name --> properties --> 

All Configurations, All platforms
--> C/C++ --> precompiled headers --> not using
--> C/C++ --> general --> additional include directories --> 
	$(SolutionDir)/../externals/GLFW/include
	$(SolutionDir)/../externals/GLEW/include
	
--> linker --> general --> additional library directories --> 
	$(SolutionDir)/../externals/GLFW/lib-vc2022
	$(SolutionDir)/../externals/GLEW/lib/Release/x64	// <---- fox x64 platform only
	$(SolutionDir)/../externals/GLEW/lib/Release/Win32	// for x84
	
--> linker --> input --> additional dependencies --> Edit -->
glfw3.lib
opengl32.lib
glew32.lib

copy D:\code\study\cppOpenGL\External Libs\GLEW\bin\Release\x64\glew32.dll into your project
