point = (x,y,z, 1)
vector = (x,y,z, 0)

# movement
translation = vector + point

# scaling
matrix = [
    [x, 0, 0, 0],  # * point --> x
    [0, y, 0, 0],  # * point --> y
    [0, 0, z, 0],
    [0, 0, 0, 1]]
scaling = matrix * point # matmul, not element-wise

# ROTATION

# roll (x/y axes):
theta = 60
rx = [[math.cos(theta), -math.sin(theta), 0, 0],    # * point --> x
    [math.sin(theta), math.cos(theta), 0, 0],       # * point --> y
    [0, 0, 1, 0],                                   # * point --> z left as is
    [0, 0, 0, 1]]                                   # * point --> result is a point

# yaw (x/z axes)
alpha = 50
ry = [[math.cos(alpha), -math.sin(alpha), 0, 0],
    [0, 1, 0, 0],
    [math.sin(alpha), math.cos(alpha), 0, 0],
    [0, 0, 0, 1]]

# pitch (y/z axes)
beta = 40
rz = [[1, 0, 0, 0],
    [math.cos(beta), -math.sin(beta), 0, 0],
    [math.sin(beta), math.cos(beta), 0, 0],
    [0, 0, 0, 1]]

Q = rx * ry * rz * P 

# to chain all the transformations we need to 
# represent the translation also as matrix multiplication
t = [[1, 0, 0, x],  # * point --> 1*Px + 0 + 0 + tx*1
    [0, 1, 0, y],
    [0, 0, 1, z],
    [0, 0, 0, 1]]
Q =  t * P


Affine transformation:
- parallel lines/planes stay parallel
- straight lines stay straight, flat planes stay flat
- relative ratios are preserved
- columns of the transformation matrix reveal the transformed coord. system
[[m11, m12, m13, m14],
[m21, m22, m23, m24],
[m31, m32, m33, m34],
[0,     0,  0,   1]]
 ^      ^   ^    ^
 x      y   z   origin
